apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
  logstash.conf: |
    # all input will come from filebeat, no local logs
    input {
      beats {
        port => 5044
      }
    }

    filter {
      json {
        source => "message"
        skip_on_invalid_json => true
        target => "doc"
      }
       mutate {
        rename => {
          "[doc][message][msg]" => "msg"
        }
      }

      if "commonEvent" in [msg] {
        grok {
          match => { "msg" => "Successfully published event to common event stream %{GREEDYDATA:data}" }
        }

        mutate {
          replace => [ "data", "%{data}" ]
          gsub => [ "data", "\n", "" ]
        }

        ruby {
          init => "require 'json'"
          code => "
              common_event = event.get('data')
              timestamp_regex = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z/
              timestamp_placeholder = 'TIMESTAMP_PLACEHOLDER'

              # Temporarily replace timestamp with placeholder
              timestamp = common_event[timestamp_regex]
              common_event.gsub!(timestamp_regex, timestamp_placeholder)

              # Add quotes to keys
              common_event.gsub!(/(\w+):/, '\"\\1\":')
              common_event.gsub!(/undefined/, '{}')
              common_event.gsub!(/\[Array\]/, '\"\[Array\]\"')
              common_event.gsub!(timestamp_placeholder, timestamp)
              common_event.gsub!(/'/, '\"')
              common_event.gsub!('\\', '')
              
          "
        }

        json {
          source => "data"
          skip_on_invalid_json => true
          target => "parsed"
        }
      }
    }

    output {
      opensearch {
        hosts => ["https://opensearch-cluster-master.kube-system.svc.cluster.local:9200"]
        index => "<index-name>"
        user => "admin"
        password => "y5J48vx80+9G"
        ssl => true
        ssl_certificate_verification => false
      }

      # file {
      #   path => "output.txt"
      # }

      stdout {
        codec => rubydebug
      }
    }
